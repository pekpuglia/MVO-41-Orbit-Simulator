function [t, data] = cowell(a0, e0, i0, RA0, w0, TA0, mu, P, tmax, terminate_fn, accs, params)
    options = odeset( ...
        'RelTol',1e-13, ...
        'AbsTol',1e-13, ...
        'InitialStep',P/1000, ...
        'Events', terminate_fn);
    [t, data] = ode89(@(t, X) Xdot(t, X, mu, accs, params), ...
        [0 tmax], [a0, e0, i0, RA0, w0, TA0], options);
end

function Xdot = Xdot(t, X, mu, accs, params)
    a = X(1);
    e = X(2);
    i = X(3);
    RA = X(4);
    w = X(5);
    TA = X(6);

    [r_vec, v_vec] = rv_from_orb_elems(a, e, i, RA, w, TA, mu);

    %acc ECI
    acc = [0;0;0];
    for i = 1:length(accs)
        acc = acc + accs{i}(params{i}, [r_vec;v_vec]);
    end

    u = TA + w;

        
    cu = cosd(u); su = sind(u);
    cW = cosd(RA); sW = sind(RA);
    ci = cosd(i); si = sind(i);
    Q = [cW*cu-sW*ci*su, -cW*su-sW*ci*cu, sW*si;
        sW*cu+cW*ci*su, -sW*su+cW*ci*cu, -cW*si;
        si*su, si*cu, ci;];
    Q = Q';

    r = vecnorm(r_vec);
    v = vecnorm(v_vec);
    h = sqrt(mu*a*(1-e^2));

    accRTN = Q * acc; R = accRTN(1); T = accRTN(2); N = accRTN(3);

    adot = 2 * a^2 * v * T / mu;
    edot = (1/v) * (2*(e+cosd(TA))*T + r*sind(TA)/a * N);
    idot = (180/pi) * sqrt(a* (1-e^2)/mu)*(N*cosd(w+TA))/(1+e*cosd(TA));
    RAdot = (180/pi) * sqrt(a * (1-e^2)/mu) * (N*sind(w+TA))/(sind(i) * (1+e*cosd(TA)));
    wdot = -RAdot * cosd(i) + (180/pi) * sqrt(a(1-e^2)/(mu*e^2)) * (-R*cosd(nu)+T(2+e*cosd(nu))*sind(nu)/(1+e*cosd(nu)));
    TAdot = (180/pi) * (h/r^2 - 1/(v*e) * (2*sind(TA)*T - (2*e + r*cosd(TA)/a) * N))

    Xdot = [
        adot
        edot
        idot
        RAdot
        wdot
        TAdot
        ];
end

function elem_dot = integrate_gauss(t, elem)
%       elem = a0,e0,W0,i0,w0,M0
        a = elem(1);
        e = elem(2);
        W = elem(3);
        i = elem(4);
        w = elem(5);
        M = elem(6); % radian
        E = kepler_E(e, M); % radian
        nu = 2*atand(tan(E/2)*sqrt((1+e)/(1-e))); %degrees
        u = w + nu;
        y = zeros(6,1);
        cu = cosd(u); su = sind(u);
        cW = cosd(W); sW = sind(W);
        ci = cosd(i); si = sind(i);
        Q = [cW*cu-sW*ci*su, -cW*su-sW*ci*cu, sW*si;
            sW*cu+cW*ci*su, -sW*su+cW*ci*cu, -cW*si;
            si*su, si*cu, ci;];
        Q = Q';
        
        [y(1:3),y(4:6)] = elem_to_ECI(mu,elem);
        r3 = sqrt(y(1)^2 + y(2)^2 + y(3)^2)^3;
        r = sqrt(y(1)^2 + y(2)^2 + y(3)^2);
        j2_potential = [J2*(mu*y(1)/r3)(3/2)(RE/r)^2*(5*(y(3)/r)^2-1);
                        J2*(mu*y(2)/r3)(3/2)(RE/r)^2*(5*(y(3)/r)^2-1);
                        J2*(mu*y(3)/r3)(3/2)(RE/r)^2*(5*(y(3)/r)^2-3);];
            
        rho = atmosphere(r - RE); %Air density from US Standard Model (kf/m^3)
        Vrel = y(4:6) - cross(wE,y(1:3)); %Velocity relative to the atmosphere (km/s)
        vrel = norm(Vrel); %Speed relative to the atmosphere (km/s)
        uv = Vrel/vrel; %Relative velocity unit vector
        CD = 2.2;
        drag = [-CD*pi/4*(1^2)/100*rho*(1000*vrel)^2/2*uv/1000;]; 
        vel_rtn = Q*y(4:6);
        y_dot_rtn = Q*(j2_potential + drag);
        R = y_dot_rtn(1);
        T = y_dot_rtn(2);
        N = y_dot_rtn(3);
        a_dot = 2*sqrt(a^3/(mu*(1-e^2)))(e*R*sind(nu)+T(1+e*cosd(nu)));
        e_dot = sqrt(a*(1-e^2)/mu)(R*sind(nu)+T(cosd(nu)+cos(E)));
        W_dot = (180/pi)sqrt(a(1-e^2)/mu)(N*sind(w+nu))/(sind(i)(1+e*cosd(nu)));
        i_dot = (180/pi)sqrt(a(1-e^2)/mu)*(N*cosd(w+nu))/(1+e*cosd(nu));
        w_dot = -W_dot*cosd(i) + (180/pi)sqrt(a(1-e^2)/(mu*e^2))(-R*cosd(nu)+T(2+e*cosd(nu))*sind(nu)/(1+e*cosd(nu)));
        E_dot = (vel_rtn(1) - a_dot*(1-e*cos(E))+a*e_dot*cos(E))/(a*e*sin(E));
        M_dot = E_dot - e*E_dot*cos(E) - e_dot*sin(E);
        elem_dot = [a_dot; e_dot; W_dot; i_dot; w_dot; M_dot;];
    end
    
    function E = kepler_E(e, M)
        error = 1.e-8;
        if M < pi
            E = M + e/2;
        else
            E = M - e/2;
        end
        ratio = 1;
        while abs(ratio) > error
            ratio = (E - e*sin(E) - M)/(1 - e*cos(E));
            E = E - ratio;
        end
    end